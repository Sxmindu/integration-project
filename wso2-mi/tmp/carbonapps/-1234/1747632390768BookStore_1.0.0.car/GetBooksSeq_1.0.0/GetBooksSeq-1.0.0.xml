<?xml version="1.0" encoding="UTF-8"?>
<sequence name="GetBooksSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <filter xpath="string-length(get-property('query.param.page')) > 0 or string-length(get-property('query.param.fetch')) > 0">
        <then>
            <script language="js">
                <![CDATA[
                    var page = parseInt(mc.getProperty("query.param.page"));
                    var fetch = parseInt(mc.getProperty("query.param.fetch"));

                    var skip = (page - 1) * fetch;
                    mc.setProperty("page", page);
                    mc.setProperty("fetch", fetch);
                    mc.setProperty("skip", skip);
                ]]>
            </script>
            <filter xpath="string-length(get-property('query.param.role')) > 0">
                <then>
                    <property name="role" expression="get-property('query.param.role')"/>
                    <filter regex="system_primary_staff" source="${properties.synapse.role}">
                        <then>
                        <dataServiceCall serviceName="BookDataService">
                            <operations type="single">
                                <operation name="getPaginationBooksForStaff">
                                    <param name="skip" expression="get-property('skip')"/>
                                    <param name="fetch" expression="get-property('fetch')"/>
                                </operation>
                            </operations>
                            <source type="inline"/>
                            <target type="body"/>
                        </dataServiceCall>  
                        </then>
                        <else>
                            <dataServiceCall serviceName="BookDataService">
                                <operations type="single">
                                    <operation name="getPaginationBooks">
                                        <param name="skip" expression="get-property('skip')"/>
                                        <param name="fetch" expression="get-property('fetch')"/>
                                    </operation>
                                </operations>
                                <source type="inline"/>
                                <target type="body"/>
                            </dataServiceCall>
                        </else>
                    </filter>
                </then>
                <else>
                    <dataServiceCall serviceName="BookDataService">
                        <operations type="single">
                            <operation name="getPaginationBooks">
                                <param name="skip" expression="get-property('skip')"/>
                                <param name="fetch" expression="get-property('fetch')"/>
                            </operation>
                        </operations>
                        <source type="inline"/>
                        <target type="body"/>
                    </dataServiceCall>
                </else>
            </filter>
            
            <log category="DEBUG">
                <message>Result: ${payload}</message>
            </log>
            <filter xpath="${exists($.Data)}">
                <then>
                    <property name="data" expression="json-eval($.Data.Books)"/>
                    <dataServiceCall serviceName="BookDataService">
                        <operations type="single">
                            <operation name="getBooksCount"/>
                        </operations>
                        <source type="inline"/>
                        <target type="body"/>
                    </dataServiceCall>
                    <property name="total_books" expression="json-eval($.Books.total_books)"/>
                    <script language="js">
                        <![CDATA[
                            var page = parseInt(mc.getProperty("query.param.page"));
                            var totalBooks = parseInt(mc.getProperty("total_books"));
                            var fetch = parseInt(mc.getProperty("fetch"));

                            var totalPages = Math.ceil(totalBooks / fetch);
                            mc.setProperty("total_pages", totalPages);

                            if (page == 1) {
                                mc.setProperty("previous", "null");
                            } else {
                                mc.setProperty("previous", page - 1);
                            }

                            if (page == totalPages) {
                                mc.setProperty("next", "null");
                            } else {
                                mc.setProperty("next", page + 1);
                            }
                        ]]>
                    </script>
                    <payloadFactory media-type="json">
                        <format>
                            {
                            "Books": $1,
                            "meta": {
                                "total_books": $2,
                                "total_pages": $3,
                                "prev_page": $4,
                                "current_page": $5,
                                "next_page": $6
                            }
                            }
                        </format>
                        <args>
                            <arg expression="get-property('data')"/>
                            <arg expression="get-property('total_books')"/>
                            <arg expression="get-property('total_pages')"/>
                            <arg expression="get-property('previous')"/>
                            <arg expression="get-property('page')"/>
                            <arg expression="get-property('next')"/>
                        </args>
                    </payloadFactory>
                </then>
                <else>
                    <filter xpath="string(get-property('query.param.fetch')) = '0'">
                        <then>
                            <call-template target="FaultHandleTemp">
                                <with-param name="status_code" value="400"/>
                                <with-param name="internal_error_code" value="err_0"/>
                                <with-param name="message" value="Invalid query param fetch: fetch should be greater than 0"/>
                            </call-template>
                        </then>
                        <else>
                            <call-template target="FaultHandleTemp">
                                <with-param name="status_code" value="404"/>
                                <with-param name="internal_error_code" value="err_1"/>
                                <with-param name="message" value="No books found"/>
                            </call-template>
                        </else>
                    </filter>
                </else>
            </filter>
        </then>
        <else>
            <dataServiceCall serviceName="BookDataService">
                <operations type="single">
                    <operation name="getBooks"/>
                </operations>
                <source type="inline"/>
                <target type="body"/>
            </dataServiceCall>
            <log category="DEBUG">
                <message>Result: ${payload.Data}</message>
            </log>
            <filter xpath="${exists($.Data)}">
                <then>
                    <payloadFactory media-type="json">
                        <format>
                            ${payload.Data}
                        </format>
                    </payloadFactory>
                </then>
                <else>
                    <call-template target="FaultHandleTemp">
                        <with-param name="status_code" value="404"/>
                        <with-param name="internal_error_code" value="err_1"/>
                        <with-param name="message" value="No books found"/>
                    </call-template>
                </else>
            </filter>
        </else>
    </filter>
    <respond/>
</sequence>