{"ast":null,"code":"var _s = $RefreshSig$();\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nconst useAxiosMethods = () => {\n  _s();\n  const axiosPrivate = useAxiosPrivate();\n  const get = function (url, setResponse) {\n    let resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let isMounted = true;\n    const controller = new AbortController();\n    const getRecord = async () => {\n      try {\n        const response = await axiosPrivate.get(url, {\n          signal: controller.signal\n        });\n        isMounted && setResponse(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    const getResources = async () => {\n      try {\n        const response = await axiosPrivate.get(url, {\n          signal: controller.signal,\n          responseType: 'blob'\n        });\n        isMounted && setResponse(URL.createObjectURL(response.data));\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    if (resources) {\n      getResources().then();\n    } else {\n      getRecord().then();\n    }\n    return () => {\n      isMounted = false;\n      controller.abort();\n    };\n  };\n  const post = function (url, data, setResponse) {\n    let images = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let isMounted = true;\n    const controller = new AbortController();\n    const postRecord = async () => {\n      try {\n        const response = await axiosPrivate.post(url, data, {\n          signal: controller.signal\n        });\n        isMounted && setResponse(response.data);\n        console.log(response);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    const postImage = async () => {\n      try {\n        const response = await axiosPrivate.post(url, data, {\n          signal: controller.signal,\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        isMounted && setResponse(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    if (images) {\n      postImage().then();\n    } else {\n      postRecord().then();\n    }\n    return () => {\n      isMounted = false;\n      controller.abort();\n    };\n  };\n  const put = (url, data, setResponse) => {\n    let isMounted = true;\n    const controller = new AbortController();\n    const putRecord = async () => {\n      try {\n        const response = await axiosPrivate.put(url, data, {\n          signal: controller.signal\n        });\n        isMounted && setResponse(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    putRecord().then();\n    return () => {\n      isMounted = false;\n      controller.abort();\n    };\n  };\n  const del = (url, setResponse) => {\n    let isMounted = true;\n    const controller = new AbortController();\n    const deleteRecord = async () => {\n      try {\n        const response = await axiosPrivate.delete(url, {\n          signal: controller.signal\n        });\n        isMounted && setResponse(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    deleteRecord().then();\n    return () => {\n      isMounted = false;\n      controller.abort();\n    };\n  };\n  return {\n    get,\n    post,\n    put,\n    del\n  };\n};\n_s(useAxiosMethods, \"xENI9kKerHXBCqs/C/N1Nfkf8LQ=\", false, function () {\n  return [useAxiosPrivate];\n});\nexport default useAxiosMethods;","map":{"version":3,"names":["useAxiosPrivate","useAxiosMethods","_s","axiosPrivate","get","url","setResponse","resources","arguments","length","undefined","isMounted","controller","AbortController","getRecord","response","signal","data","err","console","log","getResources","responseType","URL","createObjectURL","then","abort","post","images","postRecord","postImage","headers","put","putRecord","del","deleteRecord","delete"],"sources":["/Users/samindu/Downloads/client/src/hooks/useAxiosMethods.js"],"sourcesContent":["import useAxiosPrivate from \"../hooks/useAxiosPrivate\";\r\n\r\nconst useAxiosMethods = () => {\r\n\r\n    const axiosPrivate = useAxiosPrivate();\r\n\r\n    const get = (url, setResponse, resources = false) => {\r\n\r\n        let isMounted = true;\r\n        const controller = new AbortController();\r\n\r\n        const getRecord = async () => {\r\n            try {\r\n                const response = await axiosPrivate.get(url, {\r\n                    signal: controller.signal,\r\n                });\r\n                isMounted && setResponse(response.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        const getResources = async () => {\r\n            try {\r\n                const response = await axiosPrivate.get(url, {\r\n                    signal: controller.signal,\r\n                    responseType: 'blob',\r\n                });\r\n                isMounted && setResponse(URL.createObjectURL(response.data));\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        if (resources) {\r\n            getResources().then();\r\n        } else {\r\n            getRecord().then();\r\n        }\r\n\r\n        return () => {\r\n            isMounted = false;\r\n            controller.abort();\r\n        }\r\n\r\n    }\r\n\r\n    const post = (url, data, setResponse, images = false) => {\r\n\r\n            let isMounted = true;\r\n            const controller = new AbortController();\r\n\r\n            const postRecord = async () => {\r\n                try {\r\n                    const response = await axiosPrivate.post(url, data, {\r\n                        signal: controller.signal,\r\n                    });\r\n                    isMounted && setResponse(response.data);\r\n                    console.log(response);\r\n\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n\r\n            const postImage = async () => {\r\n                try {\r\n                    const response = await axiosPrivate.post(url, data, {\r\n                        signal: controller.signal,\r\n                        headers: { 'Content-Type': 'multipart/form-data' },\r\n                    });\r\n                    isMounted && setResponse(response.data);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n\r\n            if (images) {\r\n                postImage().then();\r\n            } else {\r\n                postRecord().then();\r\n            }\r\n\r\n            return () => {\r\n                isMounted = false;\r\n                controller.abort();\r\n            }\r\n\r\n    }\r\n\r\n    const put = (url, data, setResponse) => {\r\n\r\n        let isMounted = true;\r\n        const controller = new AbortController();\r\n\r\n        const putRecord = async () => {\r\n            try {\r\n                const response = await axiosPrivate.put(url, data, {\r\n                    signal: controller.signal,\r\n                });\r\n                isMounted && setResponse(response.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        putRecord().then();\r\n\r\n        return () => {\r\n            isMounted = false;\r\n            controller.abort();\r\n        }\r\n\r\n    }\r\n\r\n    const del = (url, setResponse) => {\r\n\r\n            let isMounted = true;\r\n            const controller = new AbortController();\r\n\r\n            const deleteRecord = async () => {\r\n                try {\r\n                    const response = await axiosPrivate.delete(url, {\r\n                        signal: controller.signal,\r\n                    });\r\n                    isMounted && setResponse(response.data);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n\r\n            deleteRecord().then();\r\n\r\n            return () => {\r\n                isMounted = false;\r\n                controller.abort();\r\n            }\r\n    }\r\n\r\n    return { get, post, put, del };\r\n\r\n}\r\n\r\nexport default useAxiosMethods;"],"mappings":";AAAA,OAAOA,eAAe,MAAM,0BAA0B;AAEtD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE1B,MAAMC,YAAY,GAAGH,eAAe,CAAC,CAAC;EAEtC,MAAMI,GAAG,GAAG,SAAAA,CAACC,GAAG,EAAEC,WAAW,EAAwB;IAAA,IAAtBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAE5C,IAAIG,SAAS,GAAG,IAAI;IACpB,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMZ,YAAY,CAACC,GAAG,CAACC,GAAG,EAAE;UACzCW,MAAM,EAAEJ,UAAU,CAACI;QACvB,CAAC,CAAC;QACFL,SAAS,IAAIL,WAAW,CAACS,QAAQ,CAACE,IAAI,CAAC;MAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACpB;IACJ,CAAC;IAED,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMN,QAAQ,GAAG,MAAMZ,YAAY,CAACC,GAAG,CAACC,GAAG,EAAE;UACzCW,MAAM,EAAEJ,UAAU,CAACI,MAAM;UACzBM,YAAY,EAAE;QAClB,CAAC,CAAC;QACFX,SAAS,IAAIL,WAAW,CAACiB,GAAG,CAACC,eAAe,CAACT,QAAQ,CAACE,IAAI,CAAC,CAAC;MAChE,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACpB;IACJ,CAAC;IAED,IAAIX,SAAS,EAAE;MACXc,YAAY,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM;MACHX,SAAS,CAAC,CAAC,CAACW,IAAI,CAAC,CAAC;IACtB;IAEA,OAAO,MAAM;MACTd,SAAS,GAAG,KAAK;MACjBC,UAAU,CAACc,KAAK,CAAC,CAAC;IACtB,CAAC;EAEL,CAAC;EAED,MAAMC,IAAI,GAAG,SAAAA,CAACtB,GAAG,EAAEY,IAAI,EAAEX,WAAW,EAAqB;IAAA,IAAnBsB,MAAM,GAAApB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAE5C,IAAIG,SAAS,GAAG,IAAI;IACpB,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMgB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMd,QAAQ,GAAG,MAAMZ,YAAY,CAACwB,IAAI,CAACtB,GAAG,EAAEY,IAAI,EAAE;UAChDD,MAAM,EAAEJ,UAAU,CAACI;QACvB,CAAC,CAAC;QACFL,SAAS,IAAIL,WAAW,CAACS,QAAQ,CAACE,IAAI,CAAC;QACvCE,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;MAEzB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACpB;IACJ,CAAC;IAED,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMf,QAAQ,GAAG,MAAMZ,YAAY,CAACwB,IAAI,CAACtB,GAAG,EAAEY,IAAI,EAAE;UAChDD,MAAM,EAAEJ,UAAU,CAACI,MAAM;UACzBe,OAAO,EAAE;YAAE,cAAc,EAAE;UAAsB;QACrD,CAAC,CAAC;QACFpB,SAAS,IAAIL,WAAW,CAACS,QAAQ,CAACE,IAAI,CAAC;MAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACpB;IACJ,CAAC;IAED,IAAIU,MAAM,EAAE;MACRE,SAAS,CAAC,CAAC,CAACL,IAAI,CAAC,CAAC;IACtB,CAAC,MAAM;MACHI,UAAU,CAAC,CAAC,CAACJ,IAAI,CAAC,CAAC;IACvB;IAEA,OAAO,MAAM;MACTd,SAAS,GAAG,KAAK;MACjBC,UAAU,CAACc,KAAK,CAAC,CAAC;IACtB,CAAC;EAET,CAAC;EAED,MAAMM,GAAG,GAAGA,CAAC3B,GAAG,EAAEY,IAAI,EAAEX,WAAW,KAAK;IAEpC,IAAIK,SAAS,GAAG,IAAI;IACpB,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMlB,QAAQ,GAAG,MAAMZ,YAAY,CAAC6B,GAAG,CAAC3B,GAAG,EAAEY,IAAI,EAAE;UAC/CD,MAAM,EAAEJ,UAAU,CAACI;QACvB,CAAC,CAAC;QACFL,SAAS,IAAIL,WAAW,CAACS,QAAQ,CAACE,IAAI,CAAC;MAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACpB;IACJ,CAAC;IAEDe,SAAS,CAAC,CAAC,CAACR,IAAI,CAAC,CAAC;IAElB,OAAO,MAAM;MACTd,SAAS,GAAG,KAAK;MACjBC,UAAU,CAACc,KAAK,CAAC,CAAC;IACtB,CAAC;EAEL,CAAC;EAED,MAAMQ,GAAG,GAAGA,CAAC7B,GAAG,EAAEC,WAAW,KAAK;IAE1B,IAAIK,SAAS,GAAG,IAAI;IACpB,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMsB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMpB,QAAQ,GAAG,MAAMZ,YAAY,CAACiC,MAAM,CAAC/B,GAAG,EAAE;UAC5CW,MAAM,EAAEJ,UAAU,CAACI;QACvB,CAAC,CAAC;QACFL,SAAS,IAAIL,WAAW,CAACS,QAAQ,CAACE,IAAI,CAAC;MAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACpB;IACJ,CAAC;IAEDiB,YAAY,CAAC,CAAC,CAACV,IAAI,CAAC,CAAC;IAErB,OAAO,MAAM;MACTd,SAAS,GAAG,KAAK;MACjBC,UAAU,CAACc,KAAK,CAAC,CAAC;IACtB,CAAC;EACT,CAAC;EAED,OAAO;IAAEtB,GAAG;IAAEuB,IAAI;IAAEK,GAAG;IAAEE;EAAI,CAAC;AAElC,CAAC;AAAAhC,EAAA,CA3IKD,eAAe;EAAA,QAEID,eAAe;AAAA;AA2IxC,eAAeC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}